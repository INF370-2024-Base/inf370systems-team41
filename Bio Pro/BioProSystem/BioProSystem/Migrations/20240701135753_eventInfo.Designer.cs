// <auto-generated />
using System;
using BioProSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioProSystem.Migrations
{
    [DbContext(typeof(DentalProSystemTestDBContext))]
    [Migration("20240701135753_eventInfo")]
    partial class eventInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BioProSystem.Models.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("BioProSystem.Models.Calander", b =>
                {
                    b.Property<int>("CalanderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalanderId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalanderId");

                    b.ToTable("Calanders");
                });

            modelBuilder.Entity("BioProSystem.Models.CalanderScheduleEvent", b =>
                {
                    b.Property<int>("CalanderScheduleEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalanderScheduleEventId"));

                    b.Property<int>("CalanderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CalanderScheduleEventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalanderScheduleEventId");

                    b.HasIndex("CalanderId");

                    b.ToTable("CalanderScheduleEvents");
                });

            modelBuilder.Entity("BioProSystem.Models.DecisionLog", b =>
                {
                    b.Property<int>("DecisionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecisionLogId"));

                    b.Property<string>("DecisionLogState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DecisionLogId");

                    b.HasIndex("SystemOrderId");

                    b.ToTable("DecisionLogs");
                });

            modelBuilder.Entity("BioProSystem.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SystemOrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BioProSystem.Models.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatusId");

                    b.ToTable("DeliveryStatuses");
                });

            modelBuilder.Entity("BioProSystem.Models.Dentist", b =>
                {
                    b.Property<int>("DentistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DentistId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DentistId");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("BioProSystem.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonForDiscount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscountId");

                    b.HasIndex("SystemOrderId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActiveEmployee")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BioProSystem.Models.EmployeeDailyHours", b =>
                {
                    b.Property<int>("EmployeeDailyHoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeDailyHoursId"));

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeDailyHoursId");

                    b.ToTable("EmployeeDailyHours");
                });

            modelBuilder.Entity("BioProSystem.Models.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("BioProSystem.Models.MediaFile", b =>
                {
                    b.Property<int>("MediaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaFileId"));

                    b.Property<DateTime?>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExportStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileSelf")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("FileSizeKb")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MediaFileId");

                    b.HasIndex("SystemOrderId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("BioProSystem.Models.MedicalAid", b =>
                {
                    b.Property<int>("MedicalAidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAidId"));

                    b.Property<string>("MedicalAidName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalAidId");

                    b.ToTable("MedicalAids");
                });

            modelBuilder.Entity("BioProSystem.Models.OpenOrder", b =>
                {
                    b.Property<int>("OpenOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpenOrderId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpenOrderId");

                    b.ToTable("OpenOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirection", b =>
                {
                    b.Property<int>("OrderDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDirectionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedDurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDirectionId");

                    b.ToTable("OrderDirections");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirectionState", b =>
                {
                    b.Property<int>("OrderDirectionStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDirectionStateId"));

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDirectionsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Ratio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDirectionStateId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("OrderDirectionsId");

                    b.ToTable("OrderDirectionStates");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderPayment", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("PaymentId");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderType", b =>
                {
                    b.Property<int>("OrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderTypeId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderWorkflowTimeline", b =>
                {
                    b.Property<int>("WorkflowStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowStructureId"));

                    b.Property<string>("EmployeeeOrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderDirectionId")
                        .HasColumnType("int");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimelineDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.HasKey("WorkflowStructureId");

                    b.HasIndex("OrderDirectionId");

                    b.HasIndex("TimelineId");

                    b.ToTable("OrderWorkflowTimelines");
                });

            modelBuilder.Entity("BioProSystem.Models.PasswordManagement", b =>
                {
                    b.Property<int>("ManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementId"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ManagementId");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("PasswordManagements");
                });

            modelBuilder.Entity("BioProSystem.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("DentistId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("DentistId");

                    b.HasIndex("MedicalAidId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("BioProSystem.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<bool>("IslatePayment")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProofOfPayment")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RefundPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BioProSystem.Models.ProceduralTimeline", b =>
                {
                    b.Property<int>("ProceduralTimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProceduralTimelineId"));

                    b.Property<int>("CalanderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EarliestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimelineDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProceduralTimelineId");

                    b.HasIndex("CalanderId");

                    b.ToTable("ProceduralTimelines");
                });

            modelBuilder.Entity("BioProSystem.Models.RefundPayment", b =>
                {
                    b.Property<int>("RefundPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundPaymentId"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProofOfrefund")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReasonForRefund")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RefundPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundPaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundPaymentId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("RefundPayments");
                });

            modelBuilder.Entity("BioProSystem.Models.SelectedArea", b =>
                {
                    b.Property<int>("SelectedAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SelectedAreaId"));

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Y")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SelectedAreaId");

                    b.ToTable("SelectedAreas");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<bool>("CurrentlyInUse")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReorderPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("StockCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.StockCategory", b =>
                {
                    b.Property<int>("StockCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockCategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockTypeId")
                        .HasColumnType("int");

                    b.HasKey("StockCategoryId");

                    b.HasIndex("StockTypeId");

                    b.ToTable("StockCategories");
                });

            modelBuilder.Entity("BioProSystem.Models.StockItem", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockItemId").ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockItemId"));

                    b.HasKey("StockId", "OrderId");

                    b.HasIndex("OrderId1");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("BioProSystem.Models.StockType", b =>
                {
                    b.Property<int>("StockTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockTypeId");

                    b.ToTable("StockType");
                });

            modelBuilder.Entity("BioProSystem.Models.StockWriteOff", b =>
                {
                    b.Property<int>("StockWriteOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockWriteOffId"));

                    b.Property<decimal>("QuantityWrittenOff")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WriteOffDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StockWriteOffId");

                    b.HasIndex("StockId");

                    b.ToTable("StockWriteOffs");
                });

            modelBuilder.Entity("BioProSystem.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DentistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MouthArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OpenOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderWorkflowTimelineId")
                        .HasColumnType("int");

                    b.Property<string>("PatientMedicalAidNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("DentistId");

                    b.HasIndex("OpenOrderId")
                        .IsUnique()
                        .HasFilter("[OpenOrderId] IS NOT NULL");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("OrderWorkflowTimelineId")
                        .IsUnique();

                    b.ToTable("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrderSteps", b =>
                {
                    b.Property<int>("SysteorderStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SysteorderStepId"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDateForStep")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentStep")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalStep")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDateForStep")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SysteorderStepId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SystemOrderId");

                    b.ToTable("SystemOrderSteps");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActiveUser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BioProSystem.Models.TeethShade", b =>
                {
                    b.Property<int>("TeethShadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeethShadeId"));

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeethShadeId");

                    b.ToTable("TeethShades");
                });

            modelBuilder.Entity("BioProSystem.Models.UserAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("EmployeeEmployeeDailyHours", b =>
                {
                    b.Property<int>("EmployeeDailyHoursId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeDailyHoursId", "EmployeesEmployeeId");

                    b.HasIndex("EmployeesEmployeeId");

                    b.ToTable("EmployeeEmployeeDailyHours");
                });

            modelBuilder.Entity("EmployeeSystemOrder", b =>
                {
                    b.Property<int>("EmployeesEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("SystemOrdersOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeesEmployeeId", "SystemOrdersOrderId");

                    b.HasIndex("SystemOrdersOrderId");

                    b.ToTable("EmployeeSystemOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PasswordManagementSystemUser", b =>
                {
                    b.Property<int>("ManagementId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagementId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordManagementSystemUser");
                });

            modelBuilder.Entity("SelectedAreaSystemOrder", b =>
                {
                    b.Property<int>("SelectedAreasSelectedAreaId")
                        .HasColumnType("int");

                    b.Property<string>("SystemOrdersOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SelectedAreasSelectedAreaId", "SystemOrdersOrderId");

                    b.HasIndex("SystemOrdersOrderId");

                    b.ToTable("SelectedAreaSystemOrder");
                });

            modelBuilder.Entity("SystemOrderTeethShade", b =>
                {
                    b.Property<string>("SystemOrdersOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeethShadesTeethShadeId")
                        .HasColumnType("int");

                    b.HasKey("SystemOrdersOrderId", "TeethShadesTeethShadeId");

                    b.HasIndex("TeethShadesTeethShadeId");

                    b.ToTable("SystemOrderTeethShade");
                });

            modelBuilder.Entity("BioProSystem.Models.CalanderScheduleEvent", b =>
                {
                    b.HasOne("BioProSystem.Models.Calander", "Calander")
                        .WithMany("Events")
                        .HasForeignKey("CalanderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calander");
                });

            modelBuilder.Entity("BioProSystem.Models.DecisionLog", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "SystemOrder")
                        .WithMany("DecisionLogs")
                        .HasForeignKey("SystemOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemOrder");
                });

            modelBuilder.Entity("BioProSystem.Models.Delivery", b =>
                {
                    b.HasOne("BioProSystem.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Employee", "Employee")
                        .WithMany("Deliveries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemOrder", "SystemOrder")
                        .WithMany("Deliveries")
                        .HasForeignKey("SystemOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Employee");

                    b.Navigation("SystemOrder");
                });

            modelBuilder.Entity("BioProSystem.Models.Discount", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "SystemOrder")
                        .WithMany("Discounts")
                        .HasForeignKey("SystemOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemOrder");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.HasOne("BioProSystem.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemUser", "SystemUser")
                        .WithMany("Employees")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("SystemUser");
                });

            modelBuilder.Entity("BioProSystem.Models.MediaFile", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "SystemOrder")
                        .WithMany("MediaFiles")
                        .HasForeignKey("SystemOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemOrder");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirectionState", b =>
                {
                    b.HasOne("BioProSystem.Models.JobTitle", "JobTitle")
                        .WithMany("OrderDirectionstates")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.OrderDirection", "OrderDirections")
                        .WithMany("OrderDirectionSteps")
                        .HasForeignKey("OrderDirectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("OrderDirections");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderPayment", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Payment", "Payment")
                        .WithMany("OrderPayment")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderWorkflowTimeline", b =>
                {
                    b.HasOne("BioProSystem.Models.OrderDirection", "orderDirection")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.ProceduralTimeline", "Timeline")
                        .WithMany("OrderWorkflowTimeline")
                        .HasForeignKey("TimelineId");

                    b.Navigation("Timeline");

                    b.Navigation("orderDirection");
                });

            modelBuilder.Entity("BioProSystem.Models.PasswordManagement", b =>
                {
                    b.HasOne("BioProSystem.Models.ActionType", "ActionType")
                        .WithMany("PasswordManagements")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");
                });

            modelBuilder.Entity("BioProSystem.Models.Patient", b =>
                {
                    b.HasOne("BioProSystem.Models.Dentist", "Dentist")
                        .WithMany("Patients")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.MedicalAid", "MedicalAid")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("MedicalAid");
                });

            modelBuilder.Entity("BioProSystem.Models.ProceduralTimeline", b =>
                {
                    b.HasOne("BioProSystem.Models.Calander", "Calander")
                        .WithMany("Timeline")
                        .HasForeignKey("CalanderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calander");
                });

            modelBuilder.Entity("BioProSystem.Models.RefundPayment", b =>
                {
                    b.HasOne("BioProSystem.Models.Payment", "Payment")
                        .WithOne("RefundPayments")
                        .HasForeignKey("BioProSystem.Models.RefundPayment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.HasOne("BioProSystem.Models.StockCategory", "StockCategory")
                        .WithMany("Stocks")
                        .HasForeignKey("StockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Supplier", "Supplier")
                        .WithMany("Stocks")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BioProSystem.Models.StockCategory", b =>
                {
                    b.HasOne("BioProSystem.Models.StockType", "StockType")
                        .WithMany("StockCategories")
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockType");
                });

            modelBuilder.Entity("BioProSystem.Models.StockItem", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany("StockItems")
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Stock", "Stock")
                        .WithMany("StockItem")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BioProSystem.Models.StockWriteOff", b =>
                {
                    b.HasOne("BioProSystem.Models.Stock", "Stock")
                        .WithMany("StockWriteOffs")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.HasOne("BioProSystem.Models.Dentist", "Dentist")
                        .WithMany("SystemOrders")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.OpenOrder", "OpenOrder")
                        .WithOne("systemOrder")
                        .HasForeignKey("BioProSystem.Models.SystemOrder", "OpenOrderId");

                    b.HasOne("BioProSystem.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.OrderType", "OrderType")
                        .WithMany("systemOrders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.OrderWorkflowTimeline", "OrderWorkflowTimeline")
                        .WithOne("systemOrder")
                        .HasForeignKey("BioProSystem.Models.SystemOrder", "OrderWorkflowTimelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("OpenOrder");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderType");

                    b.Navigation("OrderWorkflowTimeline");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrderSteps", b =>
                {
                    b.HasOne("BioProSystem.Models.Employee", "Employee")
                        .WithMany("SystemOrderSteps")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemOrder", "SystemOrders")
                        .WithMany("SystemOrderSteps")
                        .HasForeignKey("SystemOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.UserAction", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmployeeEmployeeDailyHours", b =>
                {
                    b.HasOne("BioProSystem.Models.EmployeeDailyHours", null)
                        .WithMany()
                        .HasForeignKey("EmployeeDailyHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeSystemOrder", b =>
                {
                    b.HasOne("BioProSystem.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemOrder", null)
                        .WithMany()
                        .HasForeignKey("SystemOrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManagementSystemUser", b =>
                {
                    b.HasOne("BioProSystem.Models.PasswordManagement", null)
                        .WithMany()
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SelectedAreaSystemOrder", b =>
                {
                    b.HasOne("BioProSystem.Models.SelectedArea", null)
                        .WithMany()
                        .HasForeignKey("SelectedAreasSelectedAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemOrder", null)
                        .WithMany()
                        .HasForeignKey("SystemOrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SystemOrderTeethShade", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", null)
                        .WithMany()
                        .HasForeignKey("SystemOrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.TeethShade", null)
                        .WithMany()
                        .HasForeignKey("TeethShadesTeethShadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioProSystem.Models.ActionType", b =>
                {
                    b.Navigation("PasswordManagements");
                });

            modelBuilder.Entity("BioProSystem.Models.Calander", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("BioProSystem.Models.DeliveryStatus", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("BioProSystem.Models.Dentist", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("SystemOrderSteps");
                });

            modelBuilder.Entity("BioProSystem.Models.JobTitle", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("OrderDirectionstates");
                });

            modelBuilder.Entity("BioProSystem.Models.MedicalAid", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BioProSystem.Models.OpenOrder", b =>
                {
                    b.Navigation("systemOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirection", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderDirectionSteps");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderType", b =>
                {
                    b.Navigation("systemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderWorkflowTimeline", b =>
                {
                    b.Navigation("systemOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("BioProSystem.Models.Payment", b =>
                {
                    b.Navigation("OrderPayment");

                    b.Navigation("RefundPayments")
                        .IsRequired();
                });

            modelBuilder.Entity("BioProSystem.Models.ProceduralTimeline", b =>
                {
                    b.Navigation("OrderWorkflowTimeline");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.Navigation("StockItem");

                    b.Navigation("StockWriteOffs");
                });

            modelBuilder.Entity("BioProSystem.Models.StockCategory", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.StockType", b =>
                {
                    b.Navigation("StockCategories");
                });

            modelBuilder.Entity("BioProSystem.Models.Supplier", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.Navigation("DecisionLogs");

                    b.Navigation("Deliveries");

                    b.Navigation("Discounts");

                    b.Navigation("MediaFiles");

                    b.Navigation("OrderPayments");

                    b.Navigation("StockItems");

                    b.Navigation("SystemOrderSteps");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemUser", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("UserActions");
                });
#pragma warning restore 612, 618
        }
    }
}
