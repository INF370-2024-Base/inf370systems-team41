// <auto-generated />
using System;
using BioProSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioProSystem.Migrations
{
    [DbContext(typeof(DentalProSystemTestDBContext))]
    [Migration("20240506143611_update3")]
    partial class update3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BioProSystem.Models.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("BioProSystem.Models.Calander", b =>
                {
                    b.Property<int>("CalanderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalanderId"));

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalanderId");

                    b.HasIndex("EventId");

                    b.HasIndex("TimelineId");

                    b.ToTable("Calanders");
                });

            modelBuilder.Entity("BioProSystem.Models.CalanderScheduleEvent", b =>
                {
                    b.Property<int>("CalanderScheduleEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalanderScheduleEventId"));

                    b.Property<DateTime>("CalanderScheduleEventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalanderScheduleEventId");

                    b.ToTable("CalanderScheduleEvents");
                });

            modelBuilder.Entity("BioProSystem.Models.DecisionLog", b =>
                {
                    b.Property<int>("DecisionLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DecisionLogId"));

                    b.Property<string>("DecisionLogState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DecisionLogId");

                    b.ToTable("DecisionLogs");
                });

            modelBuilder.Entity("BioProSystem.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("BioProSystem.Models.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatusId");

                    b.ToTable("DeliveryStatuses");
                });

            modelBuilder.Entity("BioProSystem.Models.Dentist", b =>
                {
                    b.Property<int>("DentistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DentistId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DentistId");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("BioProSystem.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForDiscount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId1");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BioProSystem.Models.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("TitleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("BioProSystem.Models.LatePayment", b =>
                {
                    b.Property<int>("LatePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LatePaymentId"));

                    b.Property<DateTime>("LatePaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("LatePaymentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("LatePayments");
                });

            modelBuilder.Entity("BioProSystem.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("LoginAttempt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginId");

                    b.HasIndex("UserId1");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("BioProSystem.Models.MediaFile", b =>
                {
                    b.Property<int>("MediaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaFileId"));

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExportStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileSelf")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("FileSizeKb")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MediaFileId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("BioProSystem.Models.MedicalAid", b =>
                {
                    b.Property<int>("MedicalAidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalAidId"));

                    b.Property<string>("MedicalAidName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Packet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PercentageAllowedToClaim")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MedicalAidId");

                    b.ToTable("MedicalAids");
                });

            modelBuilder.Entity("BioProSystem.Models.OpenOrder", b =>
                {
                    b.Property<int>("OpenOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OpenOrderId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenOrderTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("OpenOrderId");

                    b.ToTable("OpenOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("DecisionLogId")
                        .HasColumnType("int");

                    b.Property<int?>("MediaFileId")
                        .HasColumnType("int");

                    b.Property<int?>("OpenOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderDirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TeethShadeId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DecisionLogId");

                    b.HasIndex("MediaFileId");

                    b.HasIndex("OpenOrderId");

                    b.HasIndex("OrderDirectionId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("TeethShadeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirection", b =>
                {
                    b.Property<int>("OrderDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDirectionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MouthArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDirectionStateId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDirectionId");

                    b.HasIndex("OrderDirectionStateId");

                    b.ToTable("OrderDirections");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirectionState", b =>
                {
                    b.Property<int>("OrderDirectionStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDirectionStateId"));

                    b.Property<string>("StateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDirectionStateId");

                    b.ToTable("OrderDirectionStates");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderPayment", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("OrderId1")
                        .HasColumnType("int");

                    b.Property<string>("OrderPaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("PaymentId");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatusState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderType", b =>
                {
                    b.Property<int>("OrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderTypeState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderTypeId");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderWorkflowTimeline", b =>
                {
                    b.Property<int?>("WorkflowStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("WorkflowStructureId"));

                    b.Property<int?>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("TimelineId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowStructureId1")
                        .HasColumnType("int");

                    b.HasKey("WorkflowStructureId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("TimelineId");

                    b.HasIndex("WorkflowStructureId1");

                    b.ToTable("OrderWorkflowTimelines");
                });

            modelBuilder.Entity("BioProSystem.Models.PasswordManagement", b =>
                {
                    b.Property<int>("ManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementId"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeTimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ManagementId");

                    b.HasIndex("ActionTypeId");

                    b.ToTable("PasswordManagements");
                });

            modelBuilder.Entity("BioProSystem.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DentistId")
                        .HasColumnType("int");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidId")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("DentistId");

                    b.HasIndex("MedicalAidId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("BioProSystem.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProofOfPayment")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BioProSystem.Models.ProceduralTimeline", b =>
                {
                    b.Property<int>("ProceduralTimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProceduralTimelineId"));

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TimelineDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProceduralTimelineId");

                    b.ToTable("ProceduralTimelines");
                });

            modelBuilder.Entity("BioProSystem.Models.RefundPayment", b =>
                {
                    b.Property<int>("RefundPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundPaymentId"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProofOfrefund")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ReasonForRefund")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RefundPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundPaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundPaymentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("RefundPayments");
                });

            modelBuilder.Entity("BioProSystem.Models.StakeWriteOff", b =>
                {
                    b.Property<int>("StakeWriteOffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StakeWriteOffId"));

                    b.Property<int>("QuantityWrittenOff")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WriteOffDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StakeWriteOffId");

                    b.HasIndex("StockId");

                    b.ToTable("StakeWriteOffs");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<int>("MaximumStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<string>("ReorderPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("StockCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.StockCategory", b =>
                {
                    b.Property<int>("StockCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockCategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockCategoryId");

                    b.ToTable("StockCategories");
                });

            modelBuilder.Entity("BioProSystem.Models.StockItem", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockId1")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StockId1");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("BioProSystem.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("DentistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("DentistId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BioProSystem.Models.TeethShade", b =>
                {
                    b.Property<int>("TeethShadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeethShadeId"));

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColourCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeethShadeId");

                    b.ToTable("TeethShades");
                });

            modelBuilder.Entity("BioProSystem.Models.UserAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActionId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("BioProSystem.Models.WorkflowStatus", b =>
                {
                    b.Property<int>("WorkflowStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowStatusId"));

                    b.Property<string>("WorkflowStatusStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkflowStatusId");

                    b.ToTable("WorkflowStatuses");
                });

            modelBuilder.Entity("BioProSystem.Models.WorkflowStructure", b =>
                {
                    b.Property<int>("WorkflowStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowStructureId"));

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowStatusId")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowStructureProcedure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkflowStructureId");

                    b.HasIndex("WorkflowStatusId");

                    b.ToTable("WorkflowStructures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PasswordManagementSystemUser", b =>
                {
                    b.Property<int>("ManagementId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ManagementId", "PasswordsId");

                    b.HasIndex("PasswordsId");

                    b.ToTable("PasswordManagementSystemUser");
                });

            modelBuilder.Entity("BioProSystem.Models.Calander", b =>
                {
                    b.HasOne("BioProSystem.Models.CalanderScheduleEvent", "Event")
                        .WithMany("Calanders")
                        .HasForeignKey("EventId");

                    b.HasOne("BioProSystem.Models.ProceduralTimeline", "Timeline")
                        .WithMany("Calanders")
                        .HasForeignKey("TimelineId");

                    b.Navigation("Event");

                    b.Navigation("Timeline");
                });

            modelBuilder.Entity("BioProSystem.Models.Delivery", b =>
                {
                    b.HasOne("BioProSystem.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryStatusId");

                    b.HasOne("BioProSystem.Models.Employee", "Employee")
                        .WithMany("Deliveries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BioProSystem.Models.Discount", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany("Discounts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.HasOne("BioProSystem.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId");

                    b.HasOne("BioProSystem.Models.SystemUser", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId1");

                    b.Navigation("JobTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BioProSystem.Models.LatePayment", b =>
                {
                    b.HasOne("BioProSystem.Models.Payment", "Payment")
                        .WithMany("LatePayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BioProSystem.Models.Login", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDetail", b =>
                {
                    b.HasOne("BioProSystem.Models.DecisionLog", "DecisionLog")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DecisionLogId");

                    b.HasOne("BioProSystem.Models.MediaFile", "MediaFile")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MediaFileId");

                    b.HasOne("BioProSystem.Models.OpenOrder", "OpenOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OpenOrderId");

                    b.HasOne("BioProSystem.Models.OrderDirection", "OrderDirection")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderDirectionId");

                    b.HasOne("BioProSystem.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("BioProSystem.Models.OrderType", "OrderType")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderTypeId");

                    b.HasOne("BioProSystem.Models.TeethShade", "TeethShade")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TeethShadeId");

                    b.Navigation("DecisionLog");

                    b.Navigation("MediaFile");

                    b.Navigation("OpenOrder");

                    b.Navigation("OrderDirection");

                    b.Navigation("OrderStatus");

                    b.Navigation("OrderType");

                    b.Navigation("TeethShade");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirection", b =>
                {
                    b.HasOne("BioProSystem.Models.OrderDirectionState", "OrderDirectionState")
                        .WithMany("OrderDirections")
                        .HasForeignKey("OrderDirectionStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDirectionState");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderPayment", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderWorkflowTimeline", b =>
                {
                    b.HasOne("BioProSystem.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("BioProSystem.Models.ProceduralTimeline", "Timeline")
                        .WithMany()
                        .HasForeignKey("TimelineId");

                    b.HasOne("BioProSystem.Models.WorkflowStructure", "WorkflowStructure")
                        .WithMany()
                        .HasForeignKey("WorkflowStructureId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("Timeline");

                    b.Navigation("WorkflowStructure");
                });

            modelBuilder.Entity("BioProSystem.Models.PasswordManagement", b =>
                {
                    b.HasOne("BioProSystem.Models.ActionType", "ActionType")
                        .WithMany("PasswordManagements")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");
                });

            modelBuilder.Entity("BioProSystem.Models.Patient", b =>
                {
                    b.HasOne("BioProSystem.Models.Dentist", "Dentist")
                        .WithMany("Patients")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.MedicalAid", "MedicalAid")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("MedicalAid");
                });

            modelBuilder.Entity("BioProSystem.Models.RefundPayment", b =>
                {
                    b.HasOne("BioProSystem.Models.Payment", "Payment")
                        .WithMany("RefundPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BioProSystem.Models.StakeWriteOff", b =>
                {
                    b.HasOne("BioProSystem.Models.Stock", "Stock")
                        .WithMany("StakeWriteOffs")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.HasOne("BioProSystem.Models.StockCategory", "StockCategory")
                        .WithMany("Stocks")
                        .HasForeignKey("StockCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Supplier", "Supplier")
                        .WithMany("Stocks")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BioProSystem.Models.StockItem", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.HasOne("BioProSystem.Models.Dentist", "Dentist")
                        .WithMany("SystemOrders")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.Employee", "Employee")
                        .WithMany("SystemOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.OrderDetail", "OrderDetail")
                        .WithMany("SystemOrders")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Employee");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("BioProSystem.Models.UserAction", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BioProSystem.Models.WorkflowStructure", b =>
                {
                    b.HasOne("BioProSystem.Models.WorkflowStatus", "WorkflowStatus")
                        .WithMany("WorkflowStructures")
                        .HasForeignKey("WorkflowStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManagementSystemUser", b =>
                {
                    b.HasOne("BioProSystem.Models.PasswordManagement", null)
                        .WithMany()
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioProSystem.Models.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("PasswordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioProSystem.Models.ActionType", b =>
                {
                    b.Navigation("PasswordManagements");
                });

            modelBuilder.Entity("BioProSystem.Models.CalanderScheduleEvent", b =>
                {
                    b.Navigation("Calanders");
                });

            modelBuilder.Entity("BioProSystem.Models.DecisionLog", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.DeliveryStatus", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("BioProSystem.Models.Dentist", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.Employee", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.JobTitle", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BioProSystem.Models.MediaFile", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.MedicalAid", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("BioProSystem.Models.OpenOrder", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDetail", b =>
                {
                    b.Navigation("SystemOrders");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirection", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderDirectionState", b =>
                {
                    b.Navigation("OrderDirections");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.OrderType", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.Payment", b =>
                {
                    b.Navigation("LatePayments");

                    b.Navigation("RefundPayments");
                });

            modelBuilder.Entity("BioProSystem.Models.ProceduralTimeline", b =>
                {
                    b.Navigation("Calanders");
                });

            modelBuilder.Entity("BioProSystem.Models.Stock", b =>
                {
                    b.Navigation("StakeWriteOffs");
                });

            modelBuilder.Entity("BioProSystem.Models.StockCategory", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.Supplier", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemOrder", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("BioProSystem.Models.SystemUser", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Logins");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("BioProSystem.Models.TeethShade", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BioProSystem.Models.WorkflowStatus", b =>
                {
                    b.Navigation("WorkflowStructures");
                });
#pragma warning restore 612, 618
        }
    }
}
